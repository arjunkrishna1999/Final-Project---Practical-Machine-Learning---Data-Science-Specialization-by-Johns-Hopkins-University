testingD[,4:119] <- sapply(testingD[,4:119],function(x){
x <- 0
})
testingD$FiberWidthCh1 <- 8
testingD$VarIntenCh4 <- 100
testingD$PerimStatusCh1 <- 2
predict(modFit,newdata = testingA)
predict(modFit,newdata = testingB)
predict(modFit,newdata = testingC)
predict(modFit,newdata = testingD)
testing[,testing$TotalIntenCh2==23000]
inTrain <- createDataPartition(y=segmentationOriginal$Class,
p=0.7,
list = FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
modFit <- train(y=training[,3], x=training[,-3],
method = "rpart")
testingA <- testing[1,]
testingA[,1] <- 0
testingA[,2] <- "Test"
testingA[,4:119] <- sapply(testingA[,4:119],function(x){
x <- 0
})
testingA$TotalIntenCh2 <- 23000
testingA$FiberWidthCh1 <- 10
testingA$PerimStatusCh1 <- 2
testingB <- testing[1,]
testingB[,1] <- 0
testingB[,2] <- "Test"
testingB[,4:119] <- sapply(testingB[,4:119],function(x){
x <- 0
})
testingB$TotalIntenCh2 <- 50000
testingB$FiberWidthCh1 <- 10
testingB$VarIntenCh4 <- 100
testingC <- testing[1,]
testingC[,1] <- 0
testingC[,2] <- "Test"
testingC[,4:119] <- sapply(testingC[,4:119],function(x){
x <- 0
})
testingC$TotalIntenCh2 <- 57000
testingC$FiberWidthCh1 <- 8
testingC$VarIntenCh4 <- 100
testingD <- testing[1,]
testingD[,1] <- 0
testingD[,2] <- "Test"
testingD[,4:119] <- sapply(testingD[,4:119],function(x){
x <- 0
})
testingD$FiberWidthCh1 <- 8
testingD$VarIntenCh4 <- 100
testingD$PerimStatusCh1 <- 2
predict(modFit,newdata = testingA)
predict(modFit,newdata = testingB)
predict(modFit,newdata = testingC)
predict(modFit,newdata = testingD)
data(segmentationOriginal)
inTrain <- createDataPartition(y=segmentationOriginal$Case,
p=0.7,
list = FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
modFit <- train(y=training[,3], x=training[,-3],
method = "rpart")
print(modFit$finalModel)
plot(modFit$finalModel, uniform = TRUE)
text(modFit$finalModel, use.n = TRUE, all = TRUE, cex=0.8)
predict(modFit,newdata = testingC)
library(rattle)
library(rpart.plot)
library(pgmm)
data(olive)
library(pgmm)
data(olive)
olive = olive[,-1]
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
modFit <- train(x=olive[,-1], y=olive[,1], method = "rpart")
predict(modFit, newdata = newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modFit <- train(x=trainSA[,-10], y=trainSA[,10],
method = "glm", family = "binomial")
modFit <- train(x=trainSA[,-10], y=as.factor(trainSA[,10]),
method = "glm", family = "binomial")
modFit <- train(x=trainSA[,c(9,8,7,2,6,3)], y=as.factor(trainSA[,10]),
method = "glm", family = "binomial")
predict(modFit, newdata = trainSA)
as.factor(trainSA$chd)
predict(modFit, newdata = trainSA) == as.factor(trainSA$chd)
mean(predict(modFit, newdata = trainSA) == as.factor(trainSA$chd))
modFit <- train(x=trainSA[,c(9,8,7,2,6,3)], y=trainSA[,10],
method = "glm", family = "binomial")
predict(modFit, newdata = trainSA)
prediction <- predict(modFit, newdata = trainSA)
(prediction > 0.5)*1
missClass = function(values,prediction){
sum(((prediction > 0.5)*1) != values)/length(values)
}
prediction <- predict(modFit, newdata = trainSA)
missClass(trainSA$chd, prediction)
prediction <- predict(modFit, newdata = testSA)
missClass(testSA$chd, prediction)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
fitMod <- train(x=vowel.train[,-1], y=vowel.train[,1],
method = "rf")
?randomForest
fitMod2 <- randomForest(x=vowel.train[,-1], y=vowel.train[,1])
varImpPlot(fitMod2)
plot(fitMod$finalModel)
varImpPlot(fitMod2)
varImpPlot(fitMod)
varlmp(fitMod)
varImpPlot(fitMod2)
varImp(fitMod2)
set.seed(33833)
fitMod2 <- randomForest(x=vowel.train[,-1], y=vowel.train[,1])
varImpPlot(fitMod2)
q()
library(rsconnect)
rsconnect::deployApp()
q()
2/3
q()
library(AppliedPredictiveModeling)
library(caret)
library(ElemStatLearn)
library(pgmm)
library(rpart)
library(gbm)
library(lubridate)
library(forecast)
library(e1071)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
fitRF <- train(x=vowel.train[,-1], y=vowel.train[,1],
method = "rf")
fitBoo <- train(x=vowel.train[,-1], y=vowel.train[,1],
method = "gbm", verbose=FALSE)
pRF <- predict(fitRF, newdata = vowel.test[,-1])
pBoo <- predict(fitBoo, newdata = vowel.test[,-1])
mean(pRF == vowel.test$y)
mean(pBoo == vowel.test$y)
predDF <- data.frame(pRF, pBoo, vowel.test$y)
combFit <- train(x=predDF[,-3], y=predDF[,3], method = "gam")
predDF <- data.frame(pRF, pBoo, y=vowel.test$y)
combFit <- train(x=predDF[,-3], y=predDF[,3], method = "gam")
combFit <- train(x=predDF[,-3], y=predDF[,3], method = "gam")
set.seed(33833)
fitRF <- train(x=vowel.train[,-1], y=vowel.train[,1],
method = "rf", prox=TRUE)
fitBoo <- train(x=vowel.train[,-1], y=vowel.train[,1],
method = "gbm", verbose=FALSE)
pRF <- predict(fitRF, newdata = vowel.test[,-1])
pBoo <- predict(fitBoo, newdata = vowel.test[,-1])
mean(pRF == vowel.test$y)
mean(pBoo == vowel.test$y)
predDF <- data.frame(pRF, pBoo, y=vowel.test$y)
combFit <- train(x=predDF[,-3], y=predDF[,3], method = "gam")
set.seed(33833)
fitRF <- train(x=vowel.train[,-1], y=vowel.train[,1],
method = "rf",
trControl = trainControl(method = "cv"), number = 3)
pRF <- predict(fitRF, newdata = vowel.test[,-1])
pBoo <- predict(fitBoo, newdata = vowel.test[,-1])
mean(pRF == vowel.test$y)
mean(pBoo == vowel.test$y)
predDF <- data.frame(pRF, pBoo, y=vowel.test$y)
combFit <- train(x=predDF[,-3], y=predDF[,3], method = "gam")
confusionMatrix(pRF, vowel.test$y)$overall[1]
mean(predDF$pRF == predDF$pBoo)
d <- predDF$pRF == predDF$pBoo
mean(d == predDF$y)
predDF$y
bd <- predDF[predDF$pRF == predDF$pBoo, ]
View(bd)
mean(bd$pBoo == bd$y)
mean(predDF$pRF == predDF$pBoo)
mean(bd$pBoo == bd$y)
q()
library(e1071)
install.packages("LiblineaR")
install.packages("LiblineaR")
library(LiblineaR)
set.seed (1)
x=matrix (rnorm (20*2) , ncol =2)
y=c(rep (-1,10) , rep (1 ,10) )
x[y==1 ,]= x[y==1,] + 1
plot(x, col =(3-y))
dat=data.frame(x=x, y=as.factor (y))
svmfit =svm(y~., data=dat , kernel =" linear ", cost =10,
scale =FALSE )
svmfit =svm(y~., data=dat , kernel ="linear", cost =10,
scale =FALSE )
plot(svmfit , dat)
set.seed (1)
x=matrix (rnorm (20*2) , ncol =2)
y=c(rep (-1,10) , rep (1 ,10) )
x[y==1 ,]= x[y==1,] + 1
plot(x, col =(3-y))
dat=data.frame(x=x, y=as.factor (y))
svmfit =svm(y~., data=dat , kernel ="linear", cost =10,
scale =FALSE )
plot(svmfit , dat)
svmfit$index
set.seed (1)
x=matrix (rnorm (200*2) , ncol =2)
x[1:100 ,]=x[1:100 ,]+2
x[101:150 ,]= x[101:150 ,] -2
y=c(rep (1 ,150) ,rep (2 ,50) )
dat=data.frame(x=x,y=as.factor (y))
plot(x, col=y)
train=sample (200 ,100)
svmfit =svm(y~., data=dat [train ,], kernel =" radial ", gamma =1,
cost =1)
svmfit =svm(y~., data=dat [train ,], kernel ="radial", gamma =1,
cost =1)
plot(svmfit , dat[train ,])
svmfit =svm(y∼., data=dat [train ,], kernel =" radial ",gamma =1,
cost=1e5)
svmfit =svm(y∼., data=dat [train ,], kernel ="radial",gamma =1,
cost=1e5)
plot(svmfit ,dat [train ,])
install.packages("ROCR")
library(ROCR)
rocplot =function (pred , truth , ...){
+ predob = prediction (pred , truth )
+ perf = performance (predob , "tpr ", "fpr ")
+ plot(perf ,...)}
svmfit .opt=svm(y~., data=dat[train ,], kernel ="radial",
gamma =2, cost=1, decision.values =T)
svmfit .opt=svm(y~., data=dat[train ,], kernel ="radial", gamma =2, cost=1, decision.values =T)
svmfit.opt=svm(y~., data=dat[train ,], kernel ="radial", gamma =2, cost=1, decision.values =T)
fitted =attributes (predict (svmfit.opt ,dat[train ,], decision.values =TRUE))$decision.values
par(mfrow =c(1,2))
rocplot(fitted ,dat [train ,"y"], main="Training Data")
rocplot =function (pred , truth , ...){ predob = prediction (pred , truth )
perf = performance (predob , "tpr ", "fpr ")
plot(perf ,...)}
par(mfrow =c(1,2))
rocplot(fitted ,dat [train ,"y"], main="Training Data")
rocplot(fitted ,dat[train ,"y"], main="Training Data")
rocplot(fitted ,dat[train,"y"], main="Training Data")
rocplot = function (pred , truth , ...){
predob = prediction (pred , truth )
perf = performance (predob, "tpr", "fpr")
plot(perf ,...)}
svmfit.opt=svm(y~., data=dat[train ,], kernel ="radial", gamma =2, cost=1, decision.values =T)
fitted =attributes (predict (svmfit.opt ,dat[train ,], decision.values =TRUE))$decision.values
par(mfrow =c(1,2))
rocplot(fitted ,dat[train,"y"], main="Training Data")
svmfit.flex=svm(y~., data=dat[train ,], kernel ="radial",
gamma =50, cost=1, decision.values =T)
fitted = attributes(predict(svmfit.flex ,dat[train ,],
decision.values =T))$decision.values
rocplot(fitted ,dat[train ,"y"], add =T,col ="red")
fitted = attributes(predict(svmfit.opt ,dat[-train,],
decision.values =T))$decision.values
rocplot(fitted ,dat[-train ,"y"], main ="Test Data")
fitted =attributes(predict(svmfit.flex ,dat[-train,],
decision.values =T))$decision.values
rocplot(fitted,dat[-train ,"y"], add=T,col ="red")
q()
q()
setwd("D:/Santiago/2016/Data_Science/Practical Machine Learning/Week4")
#Read data sets
bdtraining <- read.csv("pml-training.csv")
bdtest <- read.csv("pml-testing.csv")
#Select features according to accelerometers on the belt,
#forearm, arm and dumbell and outcome feature
selectVector <- grepl("accel|classe", names(bdtraining))
#New Training data
bdtraining <- bdtraining[,selectVector]
#Investagate features with NA´s
NAvector <- sapply(bdtraining, function(x){
sum(is.na(x))
})
#Selection vector
SeleVec <- NAvector==0
#Elimanate features with NA´s
bdtraining <- bdtraining[,SeleVec]
#Select adecuate variables in test data set
#Select features according to accelerometers on the belt,
#forearm, arm and dumbell and outcome feature
selectVector <- grepl("accel", names(bdtest))
#New Training data
bdtest <- bdtest[,selectVector]
#Investagate features with NA´s
NAvector <- sapply(bdtest, function(x){
sum(is.na(x))
})
#Selection vector
SeleVec <- NAvector==0
#Elimanate features with NA´s
bdtest <- bdtest[,SeleVec]
#Some graphs
library(ggplot2)
library(grid)
library(gridExtra)
jpeg("plot1.jpg")
g1 <- ggplot(bdtraining, aes(x=total_accel_belt, y=total_accel_dumbbell,
col=classe)) +
geom_point(alpha = 0.2, lwd = 5)+
theme(legend.position="none") +
ggtitle("")
g2 <- ggplot(bdtraining, aes(x=total_accel_belt, y=total_accel_forearm,
col=classe)) +
geom_point(alpha = 0.2, lwd = 5)
library(plotly)
plotly(g1)
g1 <- plotly()
#Set working directory
setwd("D:/Santiago/2016/Data_Science/Practical Machine Learning/Week4")
#Read data sets
bdtraining <- read.csv("pml-training.csv")
bdtest <- read.csv("pml-testing.csv")
#Select features according to accelerometers on the belt,
#forearm, arm and dumbell and outcome feature
selectVector <- grepl("accel|classe", names(bdtraining))
#New Training data
bdtraining <- bdtraining[,selectVector]
#Investagate features with NA´s
NAvector <- sapply(bdtraining, function(x){
sum(is.na(x))
})
#Selection vector
SeleVec <- NAvector==0
#Elimanate features with NA´s
bdtraining <- bdtraining[,SeleVec]
#Select adecuate variables in test data set
#Select features according to accelerometers on the belt,
#forearm, arm and dumbell and outcome feature
selectVector <- grepl("accel", names(bdtest))
#New Training data
bdtest <- bdtest[,selectVector]
#Investagate features with NA´s
NAvector <- sapply(bdtest, function(x){
sum(is.na(x))
})
#Selection vector
SeleVec <- NAvector==0
#Elimanate features with NA´s
bdtest <- bdtest[,SeleVec]
#Some graphs
library(ggplot2)
library(grid)
library(gridExtra)
library(plotly)
g1 <- ggplot(bdtraining, aes(x=total_accel_belt, y=total_accel_dumbbell,
col=classe)) +
geom_point(alpha = 0.2, lwd = 5)+
theme(legend.position="none") +
ggtitle("titulo")
plotly(g1)
g1 <- plotly()
g1
g1 <- ggplot(bdtraining, aes(x=total_accel_belt, y=total_accel_dumbbell,
col=classe)) +
geom_point(alpha = 0.2, lwd = 5)+
theme(legend.position="none") +
ggtitle("titulo")
g1
g1
g2
g2 <- ggplot(bdtraining, aes(x=total_accel_belt, y=total_accel_forearm,
col=classe)) +
geom_point(alpha = 0.2, lwd = 5)
g2
dev.off()
g2
g1
plotly(g1)
g2
g1 <- ggplot(bdtraining, aes(x=total_accel_belt, y=total_accel_dumbbell,
col=classe)) +
geom_point(alpha = 0.2, lwd = 5)+
theme(legend.position="none") +
ggtitle("Total_accel_forearm vs \ntotal_accel_belt by classe")
g1
g2
g1 <- ggplot(bdtraining, aes(x=total_accel_belt, y=total_accel_dumbbell,
col=classe)) +
geom_point(alpha = 0.2, lwd = 5)+
theme(legend.position="none") +
ggtitle("Total_accel_dumbell vs \ntotal_accel_belt by classe")
g2 <- ggplot(bdtraining, aes(x=total_accel_belt, y=total_accel_forearm,
col=classe)) +
geom_point(alpha = 0.2, lwd = 5) +
ggtitle("Total_accel_forearm vs \ntotal_accel_belt by classe")
multiplot(g1,g2, ncols =2)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(g1,g2, ncols =2)
multiplot(g1,g2, cols =2)
g1 <- ggplot(bdtraining, aes(x=total_accel_belt, y=total_accel_dumbbell,
col=classe)) +
geom_point(alpha = 0.2, lwd = 5)+
theme(legend.position="none") #+
g2 <- ggplot(bdtraining, aes(x=total_accel_belt, y=total_accel_forearm,
col=classe)) +
geom_point(alpha = 0.2, lwd = 5) #+
multiplot(g1,g2, cols =2, main = "titulo")
g1 <- ggplot(bdtraining, aes(x=total_accel_belt, y=total_accel_dumbbell,
col=classe)) +
geom_point(alpha = 0.2, lwd = 5)+
theme(legend.position="none") +
ggtitle("Total_accel_dumbell vs total_accel_belt by classe")
g2 <- ggplot(bdtraining, aes(x=total_accel_belt, y=total_accel_forearm,
col=classe)) +
geom_point(alpha = 0.2, lwd = 5) +
ggtitle("Total_accel_forearm vs total_accel_belt by classe")
multiplot(g1,g2, cols =2)
jpeg("plot1.jpg")
g1 <- ggplot(bdtraining, aes(x=total_accel_belt, y=total_accel_dumbbell,
col=classe)) +
geom_point(alpha = 0.2, lwd = 5)+
theme(legend.position="none") +
ggtitle("Total_accel_dumbell vs total_accel_belt by classe")
g2 <- ggplot(bdtraining, aes(x=total_accel_belt, y=total_accel_forearm,
col=classe)) +
geom_point(alpha = 0.2, lwd = 5) +
ggtitle("Total_accel_forearm vs total_accel_belt by classe")
multiplot(g1,g2, cols =2)
dev.off()
getwd()
jpeg("plot1.jpg")
g1 <- ggplot(bdtraining, aes(x=total_accel_belt, y=total_accel_dumbbell,
col=classe)) +
geom_point(alpha = 0.2, lwd = 5)+
theme(legend.position="none") +
ggtitle("Total_accel_dumbell vs total_accel_belt by classe")
g2 <- ggplot(bdtraining, aes(x=total_accel_belt, y=total_accel_forearm,
col=classe)) +
geom_point(alpha = 0.2, lwd = 5) +
ggtitle("Total_accel_forearm vs total_accel_belt by classe")
multiplot(g1,g2, cols =1)
dev.off()
multiplot(g1,g2, cols =1)
jpeg("plot1.jpg")
g1 <- ggplot(bdtraining, aes(x=total_accel_belt, y=total_accel_dumbbell,
col=classe)) +
geom_point(alpha = 0.2, lwd = 5)+
theme(legend.position="none") +
ggtitle("Total_accel_dumbell vs total_accel_belt by classe")
g2 <- ggplot(bdtraining, aes(x=total_accel_belt, y=total_accel_forearm,
col=classe)) +
geom_point(alpha = 0.2, lwd = 5) +
ggtitle("Total_accel_forearm vs total_accel_belt by classe")
multiplot(g1,g2, cols =2)
dev.off()
2+2
setwd("C:/Users/USUARIO/Final-Project---Practical-Machine-Learning---Data-Science-Specialization-by-Johns-Hopkins-University")
list.files()
?jpeg()
jpeg("plot1.jpg", width = 960)
g1 <- ggplot(bdtraining, aes(x=total_accel_belt, y=total_accel_dumbbell,
col=classe)) +
geom_point(alpha = 0.2, lwd = 5)+
theme(legend.position="none") +
ggtitle("Total_accel_dumbell vs total_accel_belt by classe")
g2 <- ggplot(bdtraining, aes(x=total_accel_belt, y=total_accel_forearm,
col=classe)) +
geom_point(alpha = 0.2, lwd = 5) +
ggtitle("Total_accel_forearm vs total_accel_belt by classe")
multiplot(g1,g2, cols =2)
dev.off()
list.files()
q()
